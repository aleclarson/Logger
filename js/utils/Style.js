// Generated by CoffeeScript 1.12.4
var Palette, Property, Shape, Style, Type, ansi, concatArgs, emptyFunction, sliceArray, sync, type;

emptyFunction = require("emptyFunction");

sliceArray = require("sliceArray");

Property = require("Property");

Shape = require("Shape");

ansi = require("ansi-256-colors");

sync = require("sync");

Type = require("Type");

concatArgs = require("./concatArgs");

Palette = Shape("Palette", {
  bright: Object,
  dim: Object
});

type = Type("Logger_Style");

type.defineArgs(function() {
  return {
    types: {
      palette: Palette,
      transform: Function
    },
    defaults: {
      transform: emptyFunction.thatReturnsArgument
    },
    required: {
      palette: true
    }
  };
});

type.defineFunction(function() {
  var colors, lines;
  lines = concatArgs(sliceArray(arguments)).split("\n");
  colors = this.palette[this.isDim ? "dim" : "bright"];
  return this._transform(sync.map(lines, (function(_this) {
    return function(line) {
      var color;
      if (_this.isBold) {
        line = "\x1b[1m" + line + "\x1b[22m";
      }
      if (color = _this.fg && colors[_this.fg]) {
        color = ansi.fg.getRgb.apply(null, color);
        line = color + line + ansi.reset;
      }
      return line;
    };
  })(this)));
});

type.defineValues(function(options) {
  return {
    palette: options.palette,
    fg: null,
    isDim: false,
    isBold: false,
    _transform: options.transform
  };
});

type.initInstance(function() {
  var attributes, colors, key, prop;
  colors = Object.keys(this.palette.bright);
  attributes = Style.createAttributes(colors, function(key, value) {
    this[key] = value;
    return this;
  });
  for (key in attributes) {
    prop = attributes[key];
    prop.define(this, key);
  }
});

type.defineStatics({
  createAttributes: function(colors, setAttribute) {
    var attributes;
    attributes = {
      dim: Property({
        get: function() {
          return setAttribute.call(this, "isDim", true);
        }
      }),
      bold: Property({
        get: function() {
          return setAttribute.call(this, "isBold", true);
        }
      })
    };
    sync.each(colors, function(key) {
      return attributes[key] = Property({
        get: function() {
          return setAttribute.call(this, "fg", key);
        }
      });
    });
    return attributes;
  }
});

module.exports = Style = type.build();
